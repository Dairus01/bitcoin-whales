{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const DemoMode=_ref=>{let{onDataUpdate}=_ref;const[isActive,setIsActive]=useState(false);useEffect(()=>{// Check if backend is available\nconst checkBackend=async()=>{try{const response=await fetch('/config');if(response.ok){setIsActive(false);return;}}catch(error){// Backend not available, start demo mode\nsetIsActive(true);startDemoMode();}};checkBackend();},[]);const startDemoMode=()=>{let whaleCount=0;let blockCount=0;// Generate mock whale transactions\nconst whaleInterval=setInterval(()=>{if(!isActive){clearInterval(whaleInterval);return;}const mockWhale={hash:\"demo_whale_\".concat(whaleCount),value_btc:50+Math.random()*200,value_usd:(50+Math.random()*200)*45000,timestamp:Date.now()/1000,address:\"demo_address_\".concat(whaleCount)};onDataUpdate('whale',mockWhale);whaleCount++;},3000+Math.random()*4000);// Random interval between 3-7 seconds\n// Generate mock blocks\nconst blockInterval=setInterval(()=>{if(!isActive){clearInterval(blockInterval);return;}const mockBlock={height:800000+blockCount,n_tx:1000+Math.floor(Math.random()*2000),timestamp:Date.now()/1000};onDataUpdate('block',mockBlock);blockCount++;},10000+Math.random()*5000);// Random interval between 10-15 seconds\n// Generate mock summaries\nconst summaryInterval=setInterval(()=>{if(!isActive){clearInterval(summaryInterval);return;}const mockSummary={count:50+Math.floor(Math.random()*100),total_btc:100+Math.random()*500,avg_btc:2+Math.random()*5,total_usd:(100+Math.random()*500)*45000,avg_usd:(2+Math.random()*5)*45000,whales:Math.floor(Math.random()*5),timestamp:Date.now()/1000};onDataUpdate('summary',mockSummary);},60000);// Every minute\n// Cleanup function\nreturn()=>{clearInterval(whaleInterval);clearInterval(blockInterval);clearInterval(summaryInterval);};};if(!isActive)return null;return/*#__PURE__*/_jsx(\"div\",{style:{position:'fixed',top:'20px',right:'20px',background:'rgba(255, 193, 7, 0.9)',color:'#000',padding:'10px 15px',borderRadius:'8px',fontSize:'14px',fontWeight:'600',zIndex:1000,backdropFilter:'blur(10px)',border:'1px solid rgba(255, 193, 7, 0.3)'},children:\"\\uD83C\\uDFAD Demo Mode - Mock Data\"});};export default DemoMode;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","DemoMode","_ref","onDataUpdate","isActive","setIsActive","checkBackend","response","fetch","ok","error","startDemoMode","whaleCount","blockCount","whaleInterval","setInterval","clearInterval","mockWhale","hash","concat","value_btc","Math","random","value_usd","timestamp","Date","now","address","blockInterval","mockBlock","height","n_tx","floor","summaryInterval","mockSummary","count","total_btc","avg_btc","total_usd","avg_usd","whales","style","position","top","right","background","color","padding","borderRadius","fontSize","fontWeight","zIndex","backdropFilter","border","children"],"sources":["C:/Users/user/Downloads/whalewatch_web_updated/src/components/DemoMode.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst DemoMode = ({ onDataUpdate }) => {\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Check if backend is available\r\n    const checkBackend = async () => {\r\n      try {\r\n        const response = await fetch('/config');\r\n        if (response.ok) {\r\n          setIsActive(false);\r\n          return;\r\n        }\r\n      } catch (error) {\r\n        // Backend not available, start demo mode\r\n        setIsActive(true);\r\n        startDemoMode();\r\n      }\r\n    };\r\n\r\n    checkBackend();\r\n  }, []);\r\n\r\n  const startDemoMode = () => {\r\n    let whaleCount = 0;\r\n    let blockCount = 0;\r\n\r\n    // Generate mock whale transactions\r\n    const whaleInterval = setInterval(() => {\r\n      if (!isActive) {\r\n        clearInterval(whaleInterval);\r\n        return;\r\n      }\r\n\r\n      const mockWhale = {\r\n        hash: `demo_whale_${whaleCount}`,\r\n        value_btc: 50 + Math.random() * 200,\r\n        value_usd: (50 + Math.random() * 200) * 45000,\r\n        timestamp: Date.now() / 1000,\r\n        address: `demo_address_${whaleCount}`\r\n      };\r\n\r\n      onDataUpdate('whale', mockWhale);\r\n      whaleCount++;\r\n    }, 3000 + Math.random() * 4000); // Random interval between 3-7 seconds\r\n\r\n    // Generate mock blocks\r\n    const blockInterval = setInterval(() => {\r\n      if (!isActive) {\r\n        clearInterval(blockInterval);\r\n        return;\r\n      }\r\n\r\n      const mockBlock = {\r\n        height: 800000 + blockCount,\r\n        n_tx: 1000 + Math.floor(Math.random() * 2000),\r\n        timestamp: Date.now() / 1000\r\n      };\r\n\r\n      onDataUpdate('block', mockBlock);\r\n      blockCount++;\r\n    }, 10000 + Math.random() * 5000); // Random interval between 10-15 seconds\r\n\r\n    // Generate mock summaries\r\n    const summaryInterval = setInterval(() => {\r\n      if (!isActive) {\r\n        clearInterval(summaryInterval);\r\n        return;\r\n      }\r\n\r\n      const mockSummary = {\r\n        count: 50 + Math.floor(Math.random() * 100),\r\n        total_btc: 100 + Math.random() * 500,\r\n        avg_btc: 2 + Math.random() * 5,\r\n        total_usd: (100 + Math.random() * 500) * 45000,\r\n        avg_usd: (2 + Math.random() * 5) * 45000,\r\n        whales: Math.floor(Math.random() * 5),\r\n        timestamp: Date.now() / 1000\r\n      };\r\n\r\n      onDataUpdate('summary', mockSummary);\r\n    }, 60000); // Every minute\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      clearInterval(whaleInterval);\r\n      clearInterval(blockInterval);\r\n      clearInterval(summaryInterval);\r\n    };\r\n  };\r\n\r\n  if (!isActive) return null;\r\n\r\n  return (\r\n    <div style={{\r\n      position: 'fixed',\r\n      top: '20px',\r\n      right: '20px',\r\n      background: 'rgba(255, 193, 7, 0.9)',\r\n      color: '#000',\r\n      padding: '10px 15px',\r\n      borderRadius: '8px',\r\n      fontSize: '14px',\r\n      fontWeight: '600',\r\n      zIndex: 1000,\r\n      backdropFilter: 'blur(10px)',\r\n      border: '1px solid rgba(255, 193, 7, 0.3)'\r\n    }}>\r\n      ðŸŽ­ Demo Mode - Mock Data\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DemoMode;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}