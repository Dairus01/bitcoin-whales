{"version":3,"file":"static/js/790.b204e0bc.chunk.js","mappings":"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","sources":["components/WhaleVisualization.js"],"sourcesContent":["import React, { useRef, useMemo } from 'react';\r\nimport { useFrame } from '@react-three/fiber';\r\nimport { Text, Sphere, Box, Cylinder } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\nconst WhaleBubble = ({ data, config, index }) => {\r\n  const meshRef = useRef();\r\n  const [hovered, setHovered] = React.useState(false);\r\n  \r\n  // Calculate size based on BTC value relative to threshold\r\n  const size = Math.max(0.5, Math.min(3, data.value_btc / config.threshold));\r\n  \r\n  // Calculate color based on value (blue to red gradient)\r\n  const colorIntensity = Math.min(1, data.value_btc / (config.threshold * 2));\r\n  const color = new THREE.Color().setHSL(0.6 - colorIntensity * 0.3, 0.8, 0.5 + colorIntensity * 0.3);\r\n  \r\n  // Position in a spiral pattern\r\n  const angle = index * 0.5;\r\n  const radius = 5 + index * 0.3;\r\n  const x = Math.cos(angle) * radius;\r\n  const y = Math.sin(angle) * radius;\r\n  const z = -index * 0.5;\r\n\r\n  useFrame((state) => {\r\n    if (meshRef.current) {\r\n      // Gentle floating animation\r\n      meshRef.current.position.y = y + Math.sin(state.clock.elapsedTime + index) * 0.5;\r\n      meshRef.current.rotation.x = Math.sin(state.clock.elapsedTime * 0.5) * 0.1;\r\n      meshRef.current.rotation.z = Math.cos(state.clock.elapsedTime * 0.3) * 0.1;\r\n      \r\n      // Pulse effect for hovered bubbles\r\n      if (hovered) {\r\n        meshRef.current.scale.setScalar(1.2);\r\n      } else {\r\n        meshRef.current.scale.setScalar(1);\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <group position={[x, y, z]}>\r\n      <Sphere\r\n        ref={meshRef}\r\n        args={[size, 16, 16]}\r\n        onPointerOver={() => setHovered(true)}\r\n        onPointerOut={() => setHovered(false)}\r\n      >\r\n        <meshStandardMaterial\r\n          color={color}\r\n          transparent\r\n          opacity={0.8}\r\n          emissive={color}\r\n          emissiveIntensity={hovered ? 0.3 : 0.1}\r\n        />\r\n      </Sphere>\r\n      \r\n      {hovered && (\r\n        <Text\r\n          position={[0, size + 0.5, 0]}\r\n          fontSize={0.3}\r\n          color=\"white\"\r\n          anchorX=\"center\"\r\n          anchorY=\"middle\"\r\n        >\r\n          {`${data.value_btc.toFixed(2)} BTC`}\r\n        </Text>\r\n      )}\r\n    </group>\r\n  );\r\n};\r\n\r\nconst BlockchainNetwork = ({ blockData }) => {\r\n  const blocksRef = useRef();\r\n  \r\n  useFrame((state) => {\r\n    if (blocksRef.current) {\r\n      blocksRef.current.rotation.y = state.clock.elapsedTime * 0.1;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <group ref={blocksRef} position={[0, 0, -10]}>\r\n      {blockData.map((block, index) => {\r\n        const angle = (index / blockData.length) * Math.PI * 2;\r\n        const radius = 8;\r\n        const x = Math.cos(angle) * radius;\r\n        const z = Math.sin(angle) * radius;\r\n        \r\n        return (\r\n          <group key={index} position={[x, 0, z]}>\r\n            <Box args={[1, 1, 1]} position={[0, 0, 0]}>\r\n              <meshStandardMaterial\r\n                color=\"#4CAF50\"\r\n                transparent\r\n                opacity={0.7}\r\n                emissive=\"#4CAF50\"\r\n                emissiveIntensity={0.2}\r\n              />\r\n            </Box>\r\n            \r\n            {/* Connection lines */}\r\n            {index < blockData.length - 1 && (\r\n              <Cylinder\r\n                args={[0.05, 0.05, radius * 0.8]}\r\n                position={[x * 0.4, 0, z * 0.4]}\r\n                rotation={[0, 0, Math.atan2(z, x)]}\r\n              >\r\n                <meshStandardMaterial color=\"#2196F3\" transparent opacity={0.3} />\r\n              </Cylinder>\r\n            )}\r\n          </group>\r\n        );\r\n      })}\r\n    </group>\r\n  );\r\n};\r\n\r\nconst DataFlow = ({ summaryData }) => {\r\n  const flowRef = useRef();\r\n  \r\n  useFrame((state) => {\r\n    if (flowRef.current && summaryData) {\r\n      // Animate data flow particles\r\n      flowRef.current.children.forEach((child, index) => {\r\n        child.position.y += 0.02;\r\n        if (child.position.y > 10) {\r\n          child.position.y = -10;\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  if (!summaryData) return null;\r\n\r\n  return (\r\n    <group ref={flowRef} position={[0, 0, 5]}>\r\n      {/* Data flow particles */}\r\n      {Array.from({ length: 20 }, (_, i) => (\r\n        <Sphere key={i} args={[0.1, 8, 8]} position={[\r\n          (Math.random() - 0.5) * 10,\r\n          (Math.random() - 0.5) * 20,\r\n          (Math.random() - 0.5) * 5\r\n        ]}>\r\n          <meshStandardMaterial\r\n            color=\"#64B5F6\"\r\n            transparent\r\n            opacity={0.6}\r\n            emissive=\"#64B5F6\"\r\n            emissiveIntensity={0.3}\r\n          />\r\n        </Sphere>\r\n      ))}\r\n    </group>\r\n  );\r\n};\r\n\r\nconst CentralHub = ({ whaleData, summaryData }) => {\r\n  const hubRef = useRef();\r\n  \r\n  useFrame((state) => {\r\n    if (hubRef.current) {\r\n      hubRef.current.rotation.y = state.clock.elapsedTime * 0.2;\r\n      hubRef.current.rotation.x = Math.sin(state.clock.elapsedTime * 0.5) * 0.1;\r\n    }\r\n  });\r\n\r\n  const activeWhales = whaleData.length;\r\n  const totalVolume = summaryData?.total_btc || 0;\r\n\r\n  return (\r\n    <group ref={hubRef} position={[0, 0, 0]}>\r\n      {/* Central monitoring hub */}\r\n      <Sphere args={[2, 32, 32]}>\r\n        <meshStandardMaterial\r\n          color=\"#FF9800\"\r\n          transparent\r\n          opacity={0.8}\r\n          emissive=\"#FF9800\"\r\n          emissiveIntensity={0.3}\r\n        />\r\n      </Sphere>\r\n      \r\n      {/* Hub details */}\r\n      <Text\r\n        position={[0, 3, 0]}\r\n        fontSize={0.5}\r\n        color=\"white\"\r\n        anchorX=\"center\"\r\n        anchorY=\"middle\"\r\n      >\r\n        {`${activeWhales} Whales`}\r\n      </Text>\r\n      \r\n      <Text\r\n        position={[0, -3, 0]}\r\n        fontSize={0.4}\r\n        color=\"white\"\r\n        anchorX=\"center\"\r\n        anchorY=\"middle\"\r\n      >\r\n        {`${totalVolume.toFixed(1)} BTC`}\r\n      </Text>\r\n      \r\n      {/* Scanning rings */}\r\n      {Array.from({ length: 3 }, (_, i) => (\r\n        <mesh key={i} position={[0, 0, 0]}>\r\n          <ringGeometry args={[2.5 + i * 0.5, 2.6 + i * 0.5, 32]} />\r\n          <meshStandardMaterial\r\n            color=\"#2196F3\"\r\n            transparent\r\n            opacity={0.3 - i * 0.1}\r\n            side={THREE.DoubleSide}\r\n          />\r\n        </mesh>\r\n      ))}\r\n    </group>\r\n  );\r\n};\r\n\r\nconst WhaleVisualization = ({ whaleData, summaryData, blockData, config }) => {\r\n  return (\r\n    <>\r\n      {/* Central monitoring hub */}\r\n      <CentralHub whaleData={whaleData} summaryData={summaryData} />\r\n      \r\n      {/* Whale transaction bubbles */}\r\n      {whaleData.map((whale, index) => (\r\n        <WhaleBubble\r\n          key={`${whale.hash}-${whale.timestamp}`}\r\n          data={whale}\r\n          config={config}\r\n          index={index}\r\n        />\r\n      ))}\r\n      \r\n      {/* Blockchain network visualization */}\r\n      <BlockchainNetwork blockData={blockData} />\r\n      \r\n      {/* Data flow particles */}\r\n      <DataFlow summaryData={summaryData} />\r\n      \r\n      {/* Ambient effects */}\r\n      <fog attach=\"fog\" args={['#0a1943', 10, 50]} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WhaleVisualization;\r\n"],"names":["WhaleBubble","_ref","data","config","index","meshRef","useRef","hovered","setHovered","React","size","Math","max","min","value_btc","threshold","colorIntensity","color","THREE","setHSL","angle","radius","x","cos","y","sin","z","useFrame","state","current","position","clock","elapsedTime","rotation","scale","setScalar","_jsxs","children","_jsx","Sphere","ref","args","onPointerOver","onPointerOut","transparent","opacity","emissive","emissiveIntensity","Text","fontSize","anchorX","anchorY","concat","toFixed","BlockchainNetwork","_ref2","blockData","blocksRef","map","block","length","PI","Box","Cylinder","atan2","DataFlow","_ref3","summaryData","flowRef","forEach","child","Array","from","_","i","random","CentralHub","_ref4","whaleData","hubRef","activeWhales","totalVolume","total_btc","side","_ref5","_Fragment","whale","hash","timestamp","attach"],"sourceRoot":""}