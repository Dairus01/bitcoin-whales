{"version":3,"file":"static/js/457.4e6c202a.chunk.js","mappings":"2LAEA,MAgHA,EAhHiBA,IAAuB,IAAtB,aAAEC,GAAcD,EAChC,MAAOE,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,IAEzCC,EAAAA,EAAAA,WAAU,KAEaC,WACnB,IAEE,UADuBC,MAAM,YAChBC,GAEX,YADAL,GAAY,EAGhB,CAAE,MAAOM,GAEPN,GAAY,GACZO,GACF,GAGFC,IACC,IAEH,MAAMD,EAAgBA,KACpB,IAAIE,EAAa,EACbC,EAAa,EAGjB,MAAMC,EAAgBC,YAAY,KAChC,IAAKb,EAEH,YADAc,cAAcF,GAIhB,MAAMG,EAAY,CAChBC,KAAK,cAADC,OAAgBP,GACpBQ,UAAW,GAAqB,IAAhBC,KAAKC,SACrBC,UAAwC,MAA5B,GAAqB,IAAhBF,KAAKC,UACtBE,UAAWC,KAAKC,MAAQ,IACxBC,QAAQ,gBAADR,OAAkBP,IAG3BX,EAAa,QAASgB,GACtBL,KACC,IAAuB,IAAhBS,KAAKC,UAGTM,EAAgBb,YAAY,KAChC,IAAKb,EAEH,YADAc,cAAcY,GAIhB,MAAMC,EAAY,CAChBC,OAAQ,IAASjB,EACjBkB,KAAM,IAAOV,KAAKW,MAAsB,IAAhBX,KAAKC,UAC7BE,UAAWC,KAAKC,MAAQ,KAG1BzB,EAAa,QAAS4B,GACtBhB,KACC,IAAwB,IAAhBQ,KAAKC,UAGVW,EAAkBlB,YAAY,KAClC,IAAKb,EAEH,YADAc,cAAciB,GAIhB,MAAMC,EAAc,CAClBC,MAAO,GAAKd,KAAKW,MAAsB,IAAhBX,KAAKC,UAC5Bc,UAAW,IAAsB,IAAhBf,KAAKC,SACtBe,QAAS,EAAoB,EAAhBhB,KAAKC,SAClBgB,UAAyC,MAA7B,IAAsB,IAAhBjB,KAAKC,UACvBiB,QAAmC,MAAzB,EAAoB,EAAhBlB,KAAKC,UACnBkB,OAAQnB,KAAKW,MAAsB,EAAhBX,KAAKC,UACxBE,UAAWC,KAAKC,MAAQ,KAG1BzB,EAAa,UAAWiC,IACvB,KAGH,MAAO,KACLlB,cAAcF,GACdE,cAAcY,GACdZ,cAAciB,KAIlB,OAAK/B,GAGHuC,EAAAA,EAAAA,KAAA,OAAKC,MAAO,CACVC,SAAU,QACVC,IAAK,OACLC,MAAO,OACPC,WAAY,yBACZC,MAAO,OACPC,QAAS,YACTC,aAAc,MACdC,SAAU,OACVC,WAAY,MACZC,OAAQ,IACRC,eAAgB,aAChBC,OAAQ,oCACRC,SAAC,uCAhBiB,K","sources":["components/DemoMode.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst DemoMode = ({ onDataUpdate }) => {\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Check if backend is available\r\n    const checkBackend = async () => {\r\n      try {\r\n        const response = await fetch('/config');\r\n        if (response.ok) {\r\n          setIsActive(false);\r\n          return;\r\n        }\r\n      } catch (error) {\r\n        // Backend not available, start demo mode\r\n        setIsActive(true);\r\n        startDemoMode();\r\n      }\r\n    };\r\n\r\n    checkBackend();\r\n  }, []);\r\n\r\n  const startDemoMode = () => {\r\n    let whaleCount = 0;\r\n    let blockCount = 0;\r\n\r\n    // Generate mock whale transactions\r\n    const whaleInterval = setInterval(() => {\r\n      if (!isActive) {\r\n        clearInterval(whaleInterval);\r\n        return;\r\n      }\r\n\r\n      const mockWhale = {\r\n        hash: `demo_whale_${whaleCount}`,\r\n        value_btc: 50 + Math.random() * 200,\r\n        value_usd: (50 + Math.random() * 200) * 45000,\r\n        timestamp: Date.now() / 1000,\r\n        address: `demo_address_${whaleCount}`\r\n      };\r\n\r\n      onDataUpdate('whale', mockWhale);\r\n      whaleCount++;\r\n    }, 3000 + Math.random() * 4000); // Random interval between 3-7 seconds\r\n\r\n    // Generate mock blocks\r\n    const blockInterval = setInterval(() => {\r\n      if (!isActive) {\r\n        clearInterval(blockInterval);\r\n        return;\r\n      }\r\n\r\n      const mockBlock = {\r\n        height: 800000 + blockCount,\r\n        n_tx: 1000 + Math.floor(Math.random() * 2000),\r\n        timestamp: Date.now() / 1000\r\n      };\r\n\r\n      onDataUpdate('block', mockBlock);\r\n      blockCount++;\r\n    }, 10000 + Math.random() * 5000); // Random interval between 10-15 seconds\r\n\r\n    // Generate mock summaries\r\n    const summaryInterval = setInterval(() => {\r\n      if (!isActive) {\r\n        clearInterval(summaryInterval);\r\n        return;\r\n      }\r\n\r\n      const mockSummary = {\r\n        count: 50 + Math.floor(Math.random() * 100),\r\n        total_btc: 100 + Math.random() * 500,\r\n        avg_btc: 2 + Math.random() * 5,\r\n        total_usd: (100 + Math.random() * 500) * 45000,\r\n        avg_usd: (2 + Math.random() * 5) * 45000,\r\n        whales: Math.floor(Math.random() * 5),\r\n        timestamp: Date.now() / 1000\r\n      };\r\n\r\n      onDataUpdate('summary', mockSummary);\r\n    }, 60000); // Every minute\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      clearInterval(whaleInterval);\r\n      clearInterval(blockInterval);\r\n      clearInterval(summaryInterval);\r\n    };\r\n  };\r\n\r\n  if (!isActive) return null;\r\n\r\n  return (\r\n    <div style={{\r\n      position: 'fixed',\r\n      top: '20px',\r\n      right: '20px',\r\n      background: 'rgba(255, 193, 7, 0.9)',\r\n      color: '#000',\r\n      padding: '10px 15px',\r\n      borderRadius: '8px',\r\n      fontSize: '14px',\r\n      fontWeight: '600',\r\n      zIndex: 1000,\r\n      backdropFilter: 'blur(10px)',\r\n      border: '1px solid rgba(255, 193, 7, 0.3)'\r\n    }}>\r\n      ðŸŽ­ Demo Mode - Mock Data\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DemoMode;\r\n"],"names":["_ref","onDataUpdate","isActive","setIsActive","useState","useEffect","async","fetch","ok","error","startDemoMode","checkBackend","whaleCount","blockCount","whaleInterval","setInterval","clearInterval","mockWhale","hash","concat","value_btc","Math","random","value_usd","timestamp","Date","now","address","blockInterval","mockBlock","height","n_tx","floor","summaryInterval","mockSummary","count","total_btc","avg_btc","total_usd","avg_usd","whales","_jsx","style","position","top","right","background","color","padding","borderRadius","fontSize","fontWeight","zIndex","backdropFilter","border","children"],"sourceRoot":""}