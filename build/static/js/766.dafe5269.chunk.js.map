{"version":3,"file":"static/js/766.dafe5269.chunk.js","mappings":"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","sources":["components/Controls.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport './Controls.css';\r\n\r\nconst Controls = ({ config, onUpdateConfig }) => {\r\n  const [localConfig, setLocalConfig] = useState(config);\r\n  const [isUpdating, setIsUpdating] = useState(false);\r\n\r\n  const handleInputChange = (field, value) => {\r\n    setLocalConfig(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n\r\n  const handleApply = async () => {\r\n    setIsUpdating(true);\r\n    try {\r\n      await onUpdateConfig(localConfig);\r\n    } catch (error) {\r\n      console.error('Failed to update config:', error);\r\n    } finally {\r\n      setIsUpdating(false);\r\n    }\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setLocalConfig(config);\r\n  };\r\n\r\n  return (\r\n    <motion.div \r\n      className=\"controls-card\"\r\n      initial={{ opacity: 0, y: 20 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ duration: 0.5 }}\r\n    >\r\n      <h3>‚öôÔ∏è Settings</h3>\r\n      \r\n      <div className=\"control-group\">\r\n        <label htmlFor=\"threshold\">\r\n          Whale Threshold (BTC)\r\n          <span className=\"tooltip\">Minimum BTC amount to classify as a whale transaction</span>\r\n        </label>\r\n        <div className=\"input-wrapper\">\r\n          <input\r\n            id=\"threshold\"\r\n            type=\"number\"\r\n            min=\"0.1\"\r\n            step=\"0.1\"\r\n            value={localConfig.threshold}\r\n            onChange={(e) => handleInputChange('threshold', parseFloat(e.target.value) || 0)}\r\n            className=\"control-input\"\r\n          />\r\n          <span className=\"unit\">BTC</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"control-group\">\r\n        <label htmlFor=\"interval\">\r\n          Summary Interval (seconds)\r\n          <span className=\"tooltip\">How often to generate summary statistics</span>\r\n        </label>\r\n        <div className=\"input-wrapper\">\r\n          <input\r\n            id=\"interval\"\r\n            type=\"number\"\r\n            min=\"5\"\r\n            step=\"1\"\r\n            value={localConfig.interval}\r\n            onChange={(e) => handleInputChange('interval', parseInt(e.target.value) || 0)}\r\n            className=\"control-input\"\r\n          />\r\n          <span className=\"unit\">sec</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"control-actions\">\r\n        <motion.button\r\n          className=\"apply-btn\"\r\n          onClick={handleApply}\r\n          disabled={isUpdating}\r\n          whileHover={{ scale: 1.05 }}\r\n          whileTap={{ scale: 0.95 }}\r\n        >\r\n          {isUpdating ? 'üîÑ Updating...' : '‚úÖ Apply'}\r\n        </motion.button>\r\n        \r\n        <motion.button\r\n          className=\"reset-btn\"\r\n          onClick={handleReset}\r\n          whileHover={{ scale: 1.05 }}\r\n          whileTap={{ scale: 0.95 }}\r\n        >\r\n          üîÑ Reset\r\n        </motion.button>\r\n      </div>\r\n\r\n      <div className=\"current-status\">\r\n        <div className=\"status-item\">\r\n          <span className=\"status-label\">Current Threshold:</span>\r\n          <span className=\"status-value\">{config.threshold} BTC</span>\r\n        </div>\r\n        <div className=\"status-item\">\r\n          <span className=\"status-label\">Current Interval:</span>\r\n          <span className=\"status-value\">{config.interval}s</span>\r\n        </div>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n"],"names":["_ref","config","onUpdateConfig","localConfig","setLocalConfig","useState","isUpdating","setIsUpdating","handleInputChange","field","value","prev","_objectSpread","_jsxs","motion","div","className","initial","opacity","y","animate","transition","duration","children","_jsx","htmlFor","id","type","min","step","threshold","onChange","e","parseFloat","target","interval","parseInt","button","onClick","async","error","console","disabled","whileHover","scale","whileTap","handleReset"],"sourceRoot":""}